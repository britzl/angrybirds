local BG_COLOR = vmath.vector4(213/255, 237/255, 246/255, 1)

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("camera", "acquire_camera_focus")
	msg.post("#collisionobject", "disable")

	-- store initial position and rotation so that we can reset after flinging
	self.initial_position = go.get_position()
	self.initial_rotation = go.get_rotation()

	-- keep track of the camera offset since we need to keep the offset when we let the camera follow the flung bird
	self.camera_offset = go.get_world_position() - go.get_world_position("camera")

	-- the target position of the camera that we will tween towards every frame
	self.camera_target = go.get_position("camera")

	-- the current camera zoom from which we will tween to the target zoom value
	self.camera_zoom = 1

	self.flinging = false		-- true if we are currently flinging
	self.aiming = false			-- true if we are currently aiming
	self.panning = false		-- true if we are currently panning around the level
	self.idle_frames = 0		-- the number of frames where the flung bird has been idle
end

function final(self)
	msg.post(".", "release_input_focus")
	msg.post("camera", "release_camera_focus")
end

function update(self, dt)
	msg.post("@render:", "clear_color", { color = BG_COLOR })
	msg.post("@render:", "draw_text", { text = "Click and drag to fling", position = vmath.vector3(20, 40, 0) } )

	--
	-- let the camera follow the bird while it is flung
	--
	if self.flinging then
		self.camera_target = go.get_position() - self.camera_offset
	end
	
	--
	-- move the camera towards the target position
	--
	local target_zoom = math.max(1, math.min(1.5, math.sqrt(go.get_position().x / self.initial_position.x)))
	self.camera_zoom = self.camera_zoom + (target_zoom - self.camera_zoom) * 0.05
	go.set_position(vmath.lerp(0.1, go.get_position("camera"), self.camera_target), "camera")
	msg.post("@render:", "set_zoom", { zoom = self.camera_zoom })
	
	--
	-- do we have a bird in the air?
	-- in this case we check if the bird is idle or still moving
	--
	if self.flinging then
		-- get angular and linear velocity and start counting the number of frames when
		-- we're more or less still/idle
		-- if we're idle for a number of frames we assume that the system is at rest and
		-- let the player fling again
		local linear_velocity = go.get("#collisionobject", "linear_velocity")
		local angular_velocity = go.get("#collisionobject", "angular_velocity")
		if vmath.length(linear_velocity) < 5 and vmath.length(angular_velocity) < 5 then
			self.idle_frames = self.idle_frames + 1
			if self.idle_frames > 60 then
				msg.post("#collisionobject", "disable")
				msg.post(".", "acquire_input_focus")
				go.set_position(self.initial_position)
				go.set_rotation(self.initial_rotation)
				self.flinging = false
				self.camera_target = self.initial_position - self.camera_offset
			end
		else
			self.idle_frames = 0
		end
	end
end

function on_input(self, action_id, action)
	local action_position = vmath.vector3(action.x, action.y, 0)
	--
	-- check for touch/click
	-- we decide here if we should start aiming or if we should fling the bird
	--
	if action_id == hash("touch") then
		if action.pressed then
			--
			-- did we click on the bird?
			-- if yes, start aiming
			-- if no, start panning
			--
			if vmath.length(action_position + go.get_world_position("camera") - go.get_world_position()) < 50 then
				self.aiming = true
				self.pressed_position = action_position
			else
				self.panning = true
				self.pressed_position = action_position
				self.pressed_camera_position = go.get_position("camera")
			end
		elseif action.released then
			--
			-- did we release while aiming?
			-- if yes, fling the bird!
			-- if no, stop panning
			--
			if self.aiming then
				local direction = self.initial_position - go.get_position()
				msg.post("#collisionobject", "enable")
				msg.post("#collisionobject", "apply_force", { force = direction * 950 * go.get("#collisionobject", "mass"), position = go.get_world_position() })
				msg.post(".", "release_input_focus")
				self.flinging = true
				self.aiming = false
				self.idle_frames = 0
				self.pressed_position = nil
			else
				self.panning = false
			end
		end
	elseif action_id == hash("toggle_physics_debug") and action.released then
		msg.post("@system:", "toggle_physics_debug")
	elseif action_id == hash("toggle_profiler") and action.released then
		msg.post("@system:", "toggle_profile")
	--
	-- mouse/finger moved while aiming?
	--
	elseif self.aiming then
		--
		-- calculate the distance we've moved from the position where we started
		-- dragging the bird
		-- limit this distance to below a threshold value
		--
		local dx = self.pressed_position.x - action_position.x
		local dy = self.pressed_position.y - action_position.y
		local radians = math.atan2(dy, dx)
		local cos = math.cos(radians)
		local sin = math.sin(radians)
		local distance = math.sqrt(dx * dx + dy * dy)
		local max_distance = 120
		if distance > max_distance then
			dx = cos * max_distance
			dy = sin * max_distance
			distance = max_distance
		end
		go.set_position(vmath.vector3(self.initial_position.x - dx, self.initial_position.y - dy, self.initial_position.z))
	--
	-- mouse/finger moved while panning?
	-- update camera target position and clamp it horizontally
	--
	elseif self.panning then
		local delta = self.pressed_position - action_position
		local pos = self.pressed_camera_position + delta
		pos.x = math.min(4000, math.max(-4000, pos.x))
		self.camera_target = pos
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
