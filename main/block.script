go.property("durability", 200)
go.property("undamaged", hash("elementStone011"))
go.property("damaged", hash("elementStone014"))
go.property("almost_destroyed", hash("elementStone046"))
go.property("debris", true)

local COLLISION_RESPONSE = hash("collision_response")
local GROUND = hash("ground")

function init(self)
	self.mass = go.get("#collisionobject", "mass")
	self.initial_durability = self.durability
	self.damage_levels = { self.almost_destroyed, self.damaged, self.undamaged }
end

function on_message(self, message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		local other_url = msg.url(nil, message.other_id, "collisionobject")
		local other_velocity = vmath.length(go.get(other_url, "linear_velocity"))
		local other_mass = go.get(other_url, "mass")

		-- damage is based on the mass ratio between what we're colliding with and own mass
		-- combined with the velocity of the object we're colliding with
		-- if we are colliding with the ground we use own velocity and a fixed mass
		local velocity = other_velocity
		if message.group == GROUND then
			velocity = vmath.length(go.get("#collisionobject", "linear_velocity"))
			other_mass = 1000
		end

		-- only apply damage if the velocity is high enough
		if velocity > 20 then
			local damage = velocity * 0.01 * self.mass / other_mass
			self.durability = self.durability - damage
			if self.durability <= 0 then
				msg.post("angrybirds", "destroyed_block", { score = math.ceil(self.mass / 10) * 10 })
				go.delete()
				if self.debris then
					for i=1,5 do
						local pos = go.get_world_position() + vmath.vector3(math.random(-30, 30), math.random(-30, 30), 0)
						local rot = vmath.quat_rotation_z(math.rad(math.random(360)))
						local scale = math.random(5, 8) / 10
						factory.create("#factory", pos, rot, {}, scale)
					end
				end
			else
				local damage_level = math.ceil(3 * self.durability / self.initial_durability)
				msg.post("#sprite", "play_animation", { id = self.damage_levels[damage_level] })
			end
		end
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
