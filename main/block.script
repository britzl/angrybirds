go.property("durability", 200)
go.property("undamaged", hash("elementStone011"))
go.property("damaged", hash("elementStone014"))
go.property("almost_destroyed", hash("elementStone046"))

local COLLISION_RESPONSE = hash("collision_response")
local BIRD = hash("bird")

function init(self)
	self.mass = go.get("#collisionobject", "mass")
	self.initial_durability = self.durability
	self.damage_levels = { self.almost_destroyed, self.damaged, self.undamaged }
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)
    -- Add update code here
    -- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		local other_url = msg.url(nil, message.other_id, "collisionobject")
		local velocity = vmath.length(go.get(other_url, "linear_velocity"))
		if velocity > 50 then
			local other_mass = go.get(other_url, "mass")
			local damage = velocity * 0.01 * self.mass / other_mass
			print(damage)
			self.durability = self.durability - damage
			if self.durability <= 0 then
				go.delete()
			else
				local damage_level = math.ceil(3 * self.durability / self.initial_durability)
				print(damage, self.durability, math.ceil(3 * self.durability / self.initial_durability))
				msg.post("#sprite", "play_animation", { id = self.damage_levels[damage_level] })
			end
		end
	end
end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
